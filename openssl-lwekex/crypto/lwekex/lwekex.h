/*
Copyright 2015 Google Inc. All Rights Reserved.

Author: nikolaenko@google.com (Valeria Nikolaenko)
Author: pseudorandom@google.com (Ananth Raghunathan)
Author: mironov@google.com (Ilya Mironov)
*/

/* crypto/lwekex/lwekex.h */
#ifndef HEADER_LWEKEX_H
#define HEADER_LWEKEX_H

#include <openssl/opensslconf.h>

#ifdef OPENSSL_NO_LWEKEX
#error LWEKEX is disabled.
#endif

#include <openssl/ossl_typ.h>
#include <openssl/bn.h>
#include <openssl/err.h>

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct lwe_param_st LWE_PARAM;
typedef struct lwe_pub_st LWE_PUB;
typedef struct lwe_pair_st LWE_PAIR;
typedef struct lwe_rec_st LWE_REC;
typedef struct lwe_ctx_st LWE_CTX;

/* Allocate and deallocate parameters, public keys, private key / public key pairs, and reconciliation data structures */
LWE_PARAM *LWE_PARAM_new(void);
void LWE_PARAM_free(LWE_PARAM *param);

LWE_PUB *LWE_PUB_new(void);
LWE_PUB *LWE_PUB_copy(LWE_PUB *dest, const LWE_PUB *src);
void LWE_PUB_free(LWE_PUB *pub);

LWE_PAIR *LWE_PAIR_new(void);
LWE_PAIR *LWE_PAIR_copy(LWE_PAIR *dest, const LWE_PAIR *src);
LWE_PAIR *LWE_PAIR_dup(const LWE_PAIR *pair);
void LWE_PAIR_free(LWE_PAIR *pair);

LWE_REC *LWE_REC_new(void);
void LWE_REC_free(LWE_REC *rec);

LWE_CTX *LWE_CTX_new(void);
void LWE_CTX_free(LWE_CTX *ctx);

/* Generate key pair */
int LWE_PAIR_generate_key(LWE_PAIR *key, LWE_CTX *ctx, char isForServer);

/* Convert public keys and reconciliation data structures from/to binary */
LWE_PUB *o2i_LWE_PUB(LWE_PUB **pub, const unsigned char *in, long len);
int i2o_LWE_PUB(LWE_PUB *pub, unsigned char **out);
LWE_REC *o2i_LWE_REC(LWE_REC **rec, const unsigned char *in, long len);
int i2o_LWE_REC(LWE_REC *rec, unsigned char **out);

/* Get public key from a key pair */
LWE_PUB *LWE_PAIR_get_publickey(LWE_PAIR *pair);
/* Does private key exist? */
int LWE_PAIR_has_privatekey(LWE_PAIR *pair);

/* Compute shared secret values */
int LWEKEX_compute_key_alice(void *out, size_t outlen, const LWE_PUB *peer_pub_key,  const LWE_REC *peer_reconciliation,
			     const LWE_PAIR *priv_pub_key, void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen), LWE_CTX *ctx, uint32_t *w);
int LWEKEX_compute_key_bob(void *out, size_t outlen, LWE_REC *reconciliation, const LWE_PUB *peer_pub_key,  const LWE_PAIR *priv_pub_key,
                            void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen), LWE_CTX *ctx, uint32_t *v);

void print_first_element_REC(const LWE_REC *rec);

/* BEGIN ERROR CODES */
/* The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
void ERR_load_RLWEKEX_strings(void);

/* Error codes for the RLWEKEX functions. */

/* Function codes. */
#define RLWEKEX_F_I2O_RLWE_PUB				 100
#define RLWEKEX_F_I2O_RLWE_REC				 104
#define RLWEKEX_F_O2I_RLWE_PUB				 101
#define RLWEKEX_F_O2I_RLWE_REC				 105
#define RLWEKEX_F_RANDOM32				 111
#define RLWEKEX_F_RANDOM64				 112
#define RLWEKEX_F_RANDOM8				 110
#define RLWEKEX_F_RLWEKEX_				 107
#define RLWEKEX_F_RLWEKEX_COMPUTE_KEY_ALICE		 108
#define RLWEKEX_F_RLWEKEX_COMPUTE_KEY_BOB		 109
#define RLWEKEX_F_RLWE_CTX_NEW				 114
#define RLWEKEX_F_RLWE_PAIR_COPY			 115
#define RLWEKEX_F_RLWE_PAIR_NEW				 102
#define RLWEKEX_F_RLWE_PARAM_NEW			 113
#define RLWEKEX_F_RLWE_PUB_COPY				 116
#define RLWEKEX_F_RLWE_PUB_NEW				 103
#define RLWEKEX_F_RLWE_REC_NEW				 106

/* Reason codes. */
#define RLWEKEX_R_INVALID_LENGTH			 102
#define RLWEKEX_R_KDF_FAILED				 100
#define RLWEKEX_R_RANDOM_FAILED				 101

#ifdef  __cplusplus
}
#endif
#endif
